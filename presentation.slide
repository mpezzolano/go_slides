# Go Lang

## History

- Project starts at Google in 2007 (by Griesemer, Pike, Thompson)
- Open source release in November 2009
- More than 250 contributors join the project
- Version 1.0 release in March 2012

## Interesting Links

.link https://golang.org/   The Project ( golang.org )

.link https://go.dev/play/  Golang Playground ( go.dev/play )

.link golang.org/doc/install How install Go ( golang.org/doc/install )

## Test your Go installation

- Add this code into a file, for example example.go

.code example/example.go

- Run the app. with this command : $ go run example.go

## Workspaces

    The go tool derives build instructions from Go source code.
    There's no need to write and maintain build scripts.
    For this to work, some prescribed directory structure, known as a workspace, is required.

    `workspace/
       bin # executable binaries
       pkg # compiled object files
       src # source code`

## Vars

.play vars/vars.go
.link https://go.dev/tour/basics/8

.caption _Gopher_ by [[Marcelo Pezzolano]]

## Packages

    All code made in Golang are organized by packages.
    We canÂ´t have two packages in the same directory.

## Functions

.play functions/functions.go

.caption _Gopher_ by [[Marcelo Pezzolano]]

## Functions with Multiple returns

    A function in go can return any numbers of results.

.play functions/functions_multiple_returns.go

## Structs

.code structs/structs1.go

.caption _Gopher_ by [[Marcelo Pezzolano]]

## Example of Handle Structs

.code structs/structs.go /^func main/,/^}/

.caption _Gopher_ by [[Marcelo Pezzolano]]

## Pointers in Go

    Go has pointers. A pointer holds the memory address of a value.
    The type *T is a pointer to a T value. Its zero value is nil.

    var p *int
    The & operator generates a pointer to its operand.

    i := 42
    p = &i
    The * operator denotes the pointer's underlying value.

    fmt.Println(*p) // read i through the pointer p
    *p = 21         // set i through the pointer p
    This is known as "dereferencing" or "indirecting".

    Unlike C, Go has no pointer arithmetic.

## Pointers example

.play pointers/pointers.go